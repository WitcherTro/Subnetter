package com.example.subnetter.util

import com.example.subnetter.model.IpAddress
import com.example.subnetter.model.NetworkInformation
import kotlin.random.Random

/**
 * Calculates the network information for a given IP address and subnet mask.
 *
 * The network information includes the network address, broadcast address, first usable address, last usable address, and number of hosts.
 *
 * @param ipAddress The IP address.
 * @param subnetMask The subnet mask.
 * @return The network information.
 */
fun calculateSubnet(ipAddress: IpAddress, subnetMask: IpAddress): NetworkInformation {
    // Convert the IP address and subnet mask to binary
    val ipBinary = ipAddress.toBinary()
    val maskBinary = subnetMask.toBinary()

    // Calculate the network address by performing a bitwise AND operation on the IP address and subnet mask
    val networkBinary = ipBinary and maskBinary
    val networkAddress = IpAddress.fromBinary(networkBinary)

    // Calculate the broadcast address by performing a bitwise OR operation on the network address and the inverted subnet mask
    val broadcastBinary = networkBinary or maskBinary.inv()
    val broadcastAddress = IpAddress.fromBinary(broadcastBinary)

    // The first usable address is the network address plus one
    val firstUsableAddress = IpAddress.fromBinary(networkBinary + 1)

    // The last usable address is the broadcast address minus one
    val lastUsableAddress = IpAddress.fromBinary(broadcastBinary - 1)

    // The number of hosts is 2^(32 - subnet bits) - 2
    val subnetBits = Integer.bitCount(maskBinary)
    val numberOfHosts = Math.pow(2.0, (32 - subnetBits).toDouble()).toLong() - 2

    return NetworkInformation(
        networkAddress = networkAddress,
        broadcastAddress = broadcastAddress,
        firstUsableAddress = firstUsableAddress,
        lastUsableAddress = lastUsableAddress,
        numberOfHosts = numberOfHosts
    )
}

/**
 * Generates a random IP address.
 *
 * Each octet of the IP address is a random number between 0 and 255.
 *
 * @return The random IP address.
 */
fun generateRandomIpAddress(): IpAddress {
    return IpAddress(
        Random.nextInt(0, 256),
        Random.nextInt(0, 256),
        Random.nextInt(0, 256),
        Random.nextInt(0, 256)
    )
}

/**
 * Generates a random subnet mask.
 *
 * The subnet mask is generated by randomly selecting a prefix length between 1 and 30, and then converting this prefix length to a binary string.
 * The binary string is then converted to an IP address.
 *
 * @return The random subnet mask.
 */
fun generateRandomSubnetMask(): IpAddress {
    val prefix = Random.nextInt(1, 31)
    val mask = IntArray(32) { if (it < prefix) 1 else 0 }
    return IpAddress(
        mask.sliceArray(0..7).joinToString("").toInt(2),
        mask.sliceArray(8..15).joinToString("").toInt(2),
        mask.sliceArray(16..23).joinToString("").toInt(2),
        mask.sliceArray(24..31).joinToString("").toInt(2)
    )
}